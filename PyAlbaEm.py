#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        PyAlbaEm.py
#
# description : Python source for the PyAlbaEm and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                PyAlbaEm are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import math
from AlbaEmLib import albaem
#from fandango.dynamic import *
import fandango

#==================================================================
#   PyAlbaEm Class Description:
#
#         Device Server for the Alba Electrometer
#
#==================================================================

#==================================================================
#   Device States Description:
#
#   DevState.ON :
#   DevState.UNKNOWN :
#==================================================================


class PyAlbaEm(fandango.DynamicDS):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        #PyTango.Device_4Impl.__init__(self,cl,name)
        fandango.DynamicDS.__init__(self,cl,name,_locals={
                                                          #'I2': lambda: (lambda attr: [self.read_I2(attr),attr][1].value)(fandango.tango.fakeAttributeValue()),
                                                          'READMEASURE': lambda axis: self.readMeasure(axis)
                                                          },useDynStates=True)
        PyAlbaEm.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.get_DynDS_properties()
        self.AllRanges = [0,0,0,0] #used to reduce the number of readings from electrometer.
        self._allMeasures =[0,0,0,0]
        self._channelsNames = []
        try:
            self.set_state(PyTango.DevState.ON)
            self.get_device_properties(self.get_device_class())
            
            self.AlbaElectr = albaem(self.AlbaEmName)
            #if self.AlbaElectr.connected == False:
            #    self.set_state(PyTango.DevState.UNKNOWN)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_excuted_hook()"
        fandango.DynamicDS.always_executed_hook(self)
        #self.set_state(PyTango.DevState.ON) 


#==================================================================
#
#    PyAlbaEm read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read I1 attribute
#------------------------------------------------------------------
    def read_I1(self, attr):
        print "In ", self.get_name(), "::read_I1()"
        
        #    Add your own code here
        try:
            self.attr_I1_read = float(self.AlbaElectr.getMeasure('1'))
            #trick for tests checkRanges
            #self.attr_I1_read = 0.00000001
            attr.set_value(self.attr_I1_read)

        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)
            #Poner el state a FAULT!!!


#------------------------------------------------------------------
#    Read I2 attribute
#------------------------------------------------------------------
    def read_I2(self, attr):
        print "In ", self.get_name(), "::read_I2()"
        
        #    Add your own code here
        try:
            self.attr_I2_read = float(self.AlbaElectr.getMeasure('2'))
            attr.set_value(self.attr_I2_read)

        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Read I3 attribute
#------------------------------------------------------------------
    def read_I3(self, attr):
        print "In ", self.get_name(), "::read_I3()"
        
        #    Add your own code here
        try:
            self.attr_I3_read = float(self.AlbaElectr.getMeasure('3'))
            attr.set_value(self.attr_I3_read)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Read I4 attribute
#------------------------------------------------------------------
    def read_I4(self, attr):
        print "In ", self.get_name(), "::read_I4()"
        
        #    Add your own code here
       
        try:
            self.attr_I4_read = float(self.AlbaElectr.getMeasure('4'))
            attr.set_value(self.attr_I4_read)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)

#------------------------------------------------------------------
#    Read AllChannels attribute
#------------------------------------------------------------------
    def read_AllChannels(self, attr):
        print "In ", self.get_name(), "::read_AllChannels()"
        
        #    Add your own code here
        try:
            measures, self.status = self.AlbaElectr.getMeasuresAll()
            for i,value in enumerate(measures): 
                self._allMeasures[i] = float(value[1])
            attr.set_value(self._allMeasures, 4)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Read range_ch1 attribute
#------------------------------------------------------------------
    def read_range_ch1(self, attr):
        print "In ", self.get_name(), "::read_range_ch1()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['1'])
            attr_range_ch1_read = rgs[0]
            attr.set_value(attr_range_ch1_read[1])
            self.AllRanges[0] = attr_range_ch1_read[1]
            self.checkRanges(attr,self.attr_I1_read,0)
        except Exception, e:
            print("Error reading range_ch1!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write range_ch1 attribute
#------------------------------------------------------------------
    def write_range_ch1(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data
        print type(data[0])

        #    Add your own code here
        self.AlbaElectr.setRanges([['1', data[0]]])
        self.AllRanges[0] = data[0]
        print str(self.AlbaElectr.getRanges(['1']))

#------------------------------------------------------------------
#    Read range_ch2 attribute
#------------------------------------------------------------------
    def read_range_ch2(self, attr):
        print "In ", self.get_name(), "::read_range_ch2()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['2'])
            attr_range_ch2_read = rgs[0]
            attr.set_value(attr_range_ch2_read[1])
            self.AllRanges[1] = attr_range_ch2_read[1]
            self.checkRanges(attr,self.attr_I2_read,1)
        except Exception, e:
            print("Error reading range_ch2!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write range_ch2 attribute
#------------------------------------------------------------------
    def write_range_ch2(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setRanges([['2', data[0]]])
        self.AllRanges[1] = data[0]
        print str(self.AlbaElectr.getRanges(['2']))

#------------------------------------------------------------------
#    Read range_ch3 attribute
#------------------------------------------------------------------
    def read_range_ch3(self, attr):
        print "In ", self.get_name(), "::read_range_ch3()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['3'])
            attr_range_ch3_read = rgs[0]
            attr.set_value(attr_range_ch3_read[1])
            self.AllRanges[2] = attr_range_ch3_read[1]
            self.checkRanges(attr,self.attr_I3_read,2)
        except Exception, e:
            print("Error reading range_ch3!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write range_ch3 attribute
#------------------------------------------------------------------
    def write_range_ch3(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here        
        self.AlbaElectr.setRanges([['3', data[0]]])
        self.AllRanges[2] = data[0]
        print str(self.AlbaElectr.getRanges(['3']))

#------------------------------------------------------------------
#    Read range_ch4 attribute
#------------------------------------------------------------------
    def read_range_ch4(self, attr):
        print "In ", self.get_name(), "::read_range_ch4()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['4'])
            attr_range_ch4_read = rgs[0]
            attr.set_value(attr_range_ch4_read[1])
            self.AllRanges[3] = attr_range_ch4_read[1]
            self.checkRanges(attr,self.attr_I4_read,3)
        except Exception, e:
            print("Error reading range_ch4!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write range_ch4 attribute
#------------------------------------------------------------------
    def write_range_ch4(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setRanges([['4', data[0]]])
        self.AllRanges[3] = data[0]
        print str(self.AlbaElectr.getRanges(['4']))

#------------------------------------------------------------------
#    Read Ranges attribute
#------------------------------------------------------------------
    def read_Ranges(self, attr):
        print "In ", self.get_name(), "::read_Ranges()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['1','2','3','4'])
            for i,r in enumerate(rgs): 
                self.AllRanges[i] = r[1]
            attr_Ranges_read = self.AllRanges
            attr.set_value(attr_Ranges_read, 4)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write Ranges attribute
#------------------------------------------------------------------
    def write_Ranges(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        d = data[0].split(',')
        ranges = []
        for i,range in enumerate(d):
            r = [str(i+1),d[i]]
            ranges.append(r)
            self.AllRanges[i] = d[i]
        #iranges = data.split()
        #ranges = [['1', iranges[0]], ['2', iranges[1]], ['3', iranges[2]], ['4', iranges[3]]]
        print "Ranges to write: %s" %ranges
        self.AlbaElectr.setRanges(ranges)

        print str(self.AlbaElectr.getRanges(['1','2','3','4']))

#------------------------------------------------------------------
#    Read filter_ch1 attribute
#------------------------------------------------------------------
    def read_filter_ch1(self, attr):
        print "In ", self.get_name(), "::read_filter_ch1()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['1'])
            attr_filter_ch1_read = fltr[0]
            attr.set_value(attr_filter_ch1_read[1])
        except Exception, e:
            print("Error reading filter_ch1!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write filter_ch1 attribute
#------------------------------------------------------------------
    def write_filter_ch1(self, attr):
        print "In ", self.get_name(), "::write_filter_ch1()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['1', data[0]]])
        print str(self.AlbaElectr.getFilters(['1']))


#------------------------------------------------------------------
#    Read filter_ch2 attribute
#------------------------------------------------------------------
    def read_filter_ch2(self, attr):
        print "In ", self.get_name(), "::read_filter_ch2()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['2'])
            attr_filter_ch2_read = fltr[0]
            attr.set_value(attr_filter_ch2_read[1])
        except Exception, e:
            print("Error reading filter_ch2!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write filter_ch2 attribute
#------------------------------------------------------------------
    def write_filter_ch2(self, attr):
        print "In ", self.get_name(), "::write_filter_ch2()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['2', data[0]]])
        print str(self.AlbaElectr.getFilters(['2']))


#------------------------------------------------------------------
#    Read filter_ch3 attribute
#------------------------------------------------------------------
    def read_filter_ch3(self, attr):
        print "In ", self.get_name(), "::read_filter_ch3()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['3'])
            attr_filter_ch3_read = fltr[0]
            attr.set_value(attr_filter_ch3_read[1])
        except Exception, e:
            print("Error reading filter_ch3!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write filter_ch3 attribute
#------------------------------------------------------------------
    def write_filter_ch3(self, attr):
        print "In ", self.get_name(), "::write_filter_ch3()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['3', data[0]]])
        print str(self.AlbaElectr.getFilters(['3']))

#------------------------------------------------------------------
#    Read filter_ch4 attribute
#------------------------------------------------------------------
    def read_filter_ch4(self, attr):
        print "In ", self.get_name(), "::read_filter_ch4()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['4'])
            attr_filter_ch4_read = fltr[0]
            attr.set_value(attr_filter_ch4_read[1])
        except Exception, e:
            print("Error reading filter_ch4!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write filter_ch4 attribute
#------------------------------------------------------------------
    def write_filter_ch4(self, attr):
        print "In ", self.get_name(), "::write_filter_ch4()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['4', data[0]]])
        print str(self.AlbaElectr.getFilters(['4']))

#------------------------------------------------------------------
#    Read Filters attribute
#------------------------------------------------------------------
    def read_Filters(self, attr):
        print "In ", self.get_name(), "::read_Filters()"
        
        #    Add your own code here
        try:
            fltrs = self.AlbaElectr.getFiltersAll()
            fltrsList = []
            for i in fltrs: fltrsList.append(i[1])
            attr_Filters_read = fltrsList
            attr.set_value(attr_Filters_read, 4)
        except Exception, e:
            print("Error reading Filters!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)


#------------------------------------------------------------------
#    Write Filters attribute
#------------------------------------------------------------------
    def write_Filters(self, attr):
        print "In ", self.get_name(), "::write_Filters()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        d = data[0].split(',')
        filters = []
        for i,filter in enumerate(d):
            f = [str(i+1),d[i]]
            filters.append(f)
        print "Filters to write: %s" %filters
        self.AlbaElectr.setFiltersAll(filters)

        print str(self.AlbaElectr.getFiltersAll())
        
#------------------------------------------------------------------
#    Read ChannelsNames attribute
#------------------------------------------------------------------
    def read_ChannelsNames(self, attr):
        print "In ", self.get_name(), "::read_ChannelsNames()"
        
        #    Add your own code here
        attr.set_value(self._channelsNames, 4)

#------------------------------------------------------------------
#    Write Filters attribute
#------------------------------------------------------------------
    def write_ChannelsNames(self, attr):
        print "In ", self.get_name(), "::write_ChannelsNames()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        #names = data.split(',')
        self._channelsNames = data
        print str(self._channelsNames)

#------------------------------------------------------------------
#    My own methods
#------------------------------------------------------------------
    def checkRanges(self,attr,current,axis):

        dictMinRanges = {'1mA':1e-6,'100uA':1e-7,'10uA':1e-8,'1uA':1e-9,'100nA':1e-10,'10nA':1e-11,'1nA':1e-12,'100pA':1e-13}
        dictMaxRanges = {'1mA':1e-3,'100uA':1e-4,'10uA':1e-5,'1uA':1e-6,'100nA':1e-7,'10nA':1e-8,'1nA':1e-9,'100pA':1e-10}
        
        if math.fabs(current) >= dictMaxRanges[self.AllRanges[axis]]:
            attr.set_quality(PyTango.AttrQuality.ATTR_ALARM)
        elif math.fabs(current) <= dictMinRanges[self.AllRanges[axis]]:
            attr.set_quality(PyTango.AttrQuality.ATTR_WARNING)
        else:
            self.set_state(PyTango.DevState.ON)
            attr.set_quality(PyTango.AttrQuality.ATTR_VALID)
            #pass
            
    def readMeasure(self,axis):
        attr = float(self.AlbaElectr.getMeasure(str(axis)))
        return attr
        #attr.set_value(self.attr_I2_read)
        
    def StopAdc(self):
        self.AlbaElectr.StopAdc()
        
    def StartAdc(self):
        self.AlbaElectr.StartAdc()
        
    def enableChannel(self,axis):
        self.AlbaElectr.enableChannel(axis)
    
    def setAvsamples(self,value):
        self.AlbaElectr.setAvsamples(value)
        
    def setTrigperiode(self,value):
        self.AlbaElectr.setTrigperiod(value)
        
    def setPoints(self,value):
        self.AlbaElectr.setPoints(value)

#==================================================================
#
#    PyAlbaEm command methods
#
#==================================================================

#==================================================================
#
#    PyAlbaEmClass class definition
#
#==================================================================
class PyAlbaEmClass(fandango.DynamicDSClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'AlbaEmName':
            [PyTango.DevString,
            "name or ip of the Alba Electrometer",
            [] ],
        'DynamicAttributes':
            [PyTango.DevVarStringArray,
            "",
            [] 
            ],
        }

    #    Command definitions
    cmd_list = {
        'updateDynamicAttributes':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
                'Display level':PyTango.DispLevel.EXPERT,
             } ],
        'StopAdc':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'StartAdc':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'enableChannel':
            [[PyTango.DevShort, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'setAvsamples':
            [[PyTango.DevDouble, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'setTrigperiode':
            [[PyTango.DevDouble, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'setPoints':
            [[PyTango.DevDouble, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        }


    #    Attribute definitions
    attr_list = {
        'I1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'I2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'I3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'I4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'AllChannels':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 4]],
        'range_ch1':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'range_ch2':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'range_ch3':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'range_ch4':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Ranges':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4],
            {
                'description':"You must introduce the four ranges to write.\nExample of writing value: 1mA 1mA 1uA 100uA"
            }
            ],
        'filter_ch1':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'filter_ch2':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'filter_ch3':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'filter_ch4':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Filters':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4],
            {
                'description':"You must introduce the four filters to write.\nExample of writing value: 1 10 100 NO "
            }
            ],
        'ChannelsNames':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4],
            {
                'description':"Channels names. Must be the same names that already exists for pool channels.",
                'memorized': True
            }
            ],
        }


#------------------------------------------------------------------
#    PyAlbaEmClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In PyAlbaEmClass  constructor"

#==================================================================
#
#    PyAlbaEm class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(PyAlbaEmClass,PyAlbaEm,'PyAlbaEm')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
