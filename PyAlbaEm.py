#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        PyAlbaEm.py
#
# description : Python source for the PyAlbaEm and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                PyAlbaEm are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
from albaemlib import albaem

#==================================================================
#   PyAlbaEm Class Description:
#
#         Device Server for the Alba Electrometer
#
#==================================================================

#==================================================================
#   Device States Description:
#
#   DevState.ON :
#   DevState.UNKNOWN :
#==================================================================


class PyAlbaEm(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        PyAlbaEm.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())

        print('------------>%s' %self.AlbaEmName)
        type(self.AlbaEmName)
        self.AlbaElectr = albaem(self.AlbaEmName)

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_excuted_hook()"


#==================================================================
#
#    PyAlbaEm read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read VIn1 attribute
#------------------------------------------------------------------
    def read_VIn1(self, attr):
        print "In ", self.get_name(), "::read_VIn1()"
        
        #    Add your own code here
        try:
            attr_VIn1_read = float(self.AlbaElectr.getMeasure('1'))
            attr.set_value(attr_VIn1_read)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)


#------------------------------------------------------------------
#    Read VIn2 attribute
#------------------------------------------------------------------
    def read_VIn2(self, attr):
        print "In ", self.get_name(), "::read_VIn2()"
        
        #    Add your own code here
        try:
            attr_VIn2_read = float(self.AlbaElectr.getMeasure('2'))
            attr.set_value(attr_VIn2_read)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)


#------------------------------------------------------------------
#    Read VIn3 attribute
#------------------------------------------------------------------
    def read_VIn3(self, attr):
        print "In ", self.get_name(), "::read_VIn3()"
        
        #    Add your own code here
        try:
            attr_VIn3_read = float(self.AlbaElectr.getMeasure('3'))
            attr.set_value(attr_VIn3_read)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)


#------------------------------------------------------------------
#    Read VIn4 attribute
#------------------------------------------------------------------
    def read_VIn4(self, attr):
        print "In ", self.get_name(), "::read_VIn4()"
        
        #    Add your own code here
       
        try:
            vin4 = float(self.AlbaElectr.getMeasure('4'))
            attr_VIn4_read = vin4
            attr.set_value(attr_VIn4_read)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)


#------------------------------------------------------------------
#    Read Ranges attribute
#------------------------------------------------------------------
    def read_Ranges(self, attr):
        print "In ", self.get_name(), "::read_Ranges()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['1','2','3','4'])
            rgsList = []
            for i in rgs: rgsList.append(i[1])
            attr_Ranges_read = rgsList
            attr.set_value(attr_Ranges_read, 4)
        except Exception, e:
            print("Erroooooooor!!!!!: %s" %e)



#==================================================================
#
#    PyAlbaEm command methods
#
#==================================================================

#==================================================================
#
#    PyAlbaEmClass class definition
#
#==================================================================
class PyAlbaEmClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'AlbaEmName':
            [PyTango.DevString,
            "name or ip of the Alba Electrometer",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'VIn1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'VIn2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'VIn3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'VIn4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Ranges':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 4]],
        }


#------------------------------------------------------------------
#    PyAlbaEmClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In PyAlbaEmClass  constructor"

#==================================================================
#
#    PyAlbaEm class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(PyAlbaEmClass,PyAlbaEm,'PyAlbaEm')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
