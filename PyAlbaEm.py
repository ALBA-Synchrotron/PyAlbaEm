#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        PyAlbaEm.py
#
# description : Python source for the PyAlbaEm and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                PyAlbaEm are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#

import thread
import PyTango
import sys
import math
from albaemlib import AlbaEm
import fandango
import logging
import logging.handlers
import time



#==================================================================
#   PyAlbaEm Class Description:
#
#         Device Server for the Alba Electrometer
#
#==================================================================

#==================================================================
#   Device States Description:
#
#   DevState.ON :
#   DevState.UNKNOWN :
#==================================================================


class PyAlbaEm(fandango.DynamicDS):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        fandango.DynamicDS.__init__(self,cl,name,_locals={
                                                          'READMEASURE': lambda axis: self.readMeasure(axis),
                                                          'READBUFFERCHANNEL': lambda axis: self.readBufferChannel(axis),
                                                          'READBUFFERMEAN' : lambda axis: self.readBufferMean(axis),
                                                          'GETATTR': lambda attr: getattr(self,attr,None),
                                                          },useDynStates=True)
        PyAlbaEm.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.get_DynDS_properties()
        self.AllRanges = [0,0,0,0] #used to reduce the number of readings from electrometer.
        self._allMeasures =[0,0,0,0]
        list_values = []
        list_attr = (("offset_percentage_ch1"), ("offset_percentage_ch2"), 
              ("offset_percentage_ch3"), ("offset_percentage_ch4"))
        for i in list_attr:
            value = self.get_attribute_memorized_value(i)
            if value == None:
               value=0
            list_values.append(int(value))
        self._offsetPercentages = list_values 

        
        self.dictRanges = {'1mA':1e-3,'100uA':1e-4,'10uA':1e-5,'1uA':1e-6,
                         '100nA':1e-7,'10nA':1e-8,'1nA':1e-9,'100pA':1e-10}
        
        self._channelsNames = ['I1','I2','I3','I4'] #@todo: check why memorized is not working
        self.__numOfPoints = 0
        self.AduToVoltConstant = 1818
        self.attr_I1_read = None
        self.attr_I2_read = None
        self.attr_I3_read = None
        self.attr_I4_read = None
        try:
            self.set_state(PyTango.DevState.ON)
            self.get_device_properties(self.get_device_class())
            self.AlbaElectr = AlbaEm(self.AlbaEmName)
            
            if self.LogFileName != "" or self.LogFileName == None or self.LogFileName == []:
                DftLogFormat = '%(threadName)-14s %(levelname)-8s %(asctime)s %(name)s: %(message)s'
                myFormat = logging.Formatter(DftLogFormat)
                self.my_logger = logging.getLogger('albaEM DS') #@note: Not too clear the difference between getLogger() and Logger()
                self.my_logger.setLevel(logging.DEBUG)
                handler = logging.handlers.RotatingFileHandler(self.LogFileName, maxBytes=10240000, backupCount=5)
                handler.setFormatter(myFormat)
                self.my_logger.addHandler(handler)
                
                self.AlbaElectr.logger.addHandler(handler)
            
            self.AlbaElectr.setEnablesAll('YES')
            state = self.AlbaElectr.getState()
            self.my_logger.info('State at init_device: %s',state)                
            self.getAllRanges()
                
            
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in init_device: %s", e)

#------------------------------------------------------------------
#    User to get Attributes Memorized
#------------------------------------------------------------------

    def get_attribute_memorized_value(self, attr_name):
        w_val = None
        db = PyTango.Util.instance().get_database()
        #db = self.get_database()
        properties = db.get_device_attribute_property(self.get_name(),attr_name)
        attr_properties = properties[attr_name]
        try:
            w_val = attr_properties["__value"][0]
        except:
            msg ='Unable to retrieve memorized value of attr: %s'% attr_name
            self.my_logger.warning(msg)
        return w_val

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_excuted_hook()"
        fandango.DynamicDS.always_executed_hook(self)
        self.checkAlbaEmState()


#==================================================================
#
#    PyAlbaEm read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read I1 attribute
#------------------------------------------------------------------
    def read_I1(self, attr):
        print "In ", self.get_name(), "::read_I1()"
        
        #    Add your own code here
        try:
            self.attr_I1_read = float(self.AlbaElectr.getMeasure('1'))
            attr.set_value(self.attr_I1_read)

        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_I1: %s", e)


#------------------------------------------------------------------
#    Read I2 attribute
#------------------------------------------------------------------
    def read_I2(self, attr):
        print "In ", self.get_name(), "::read_I2()"
        
        #    Add your own code here
        try:
            self.attr_I2_read = float(self.AlbaElectr.getMeasure('2'))
            attr.set_value(self.attr_I2_read)

        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_I2: %s", e)


#------------------------------------------------------------------
#    Read I3 attribute
#------------------------------------------------------------------
    def read_I3(self, attr):
        print "In ", self.get_name(), "::read_I3()"
        
        #    Add your own code here
        try:
            self.attr_I3_read = float(self.AlbaElectr.getMeasure('3'))
            attr.set_value(self.attr_I3_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_I3: %s", e)


#------------------------------------------------------------------
#    Read I4 attribute
#------------------------------------------------------------------
    def read_I4(self, attr):
        print "In ", self.get_name(), "::read_I4()"
        
        #    Add your own code here
       
        try:
            self.attr_I4_read = float(self.AlbaElectr.getMeasure('4'))
            attr.set_value(self.attr_I4_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_I4: %s", e)


#------------------------------------------------------------------
#    Read InstantI1 attribute
#------------------------------------------------------------------
    def read_InstantI1(self, attr):
        print "In ", self.get_name(), "::read_InstantI1()"
        
        #    Add your own code here
        try:
            attr_InstantI1_read = float(self.AlbaElectr.getInstantMeasure('1'))
            attr.set_value(attr_InstantI1_read)

        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_InstantI1: %s", e)


#------------------------------------------------------------------
#    Read InstantI2 attribute
#------------------------------------------------------------------
    def read_InstantI2(self, attr):
        print "In ", self.get_name(), "::read_InstantI2()"
        
        #    Add your own code here
        try:
            attr_InstantI2_read = float(self.AlbaElectr.getInstantMeasure('2'))
            attr.set_value(attr_InstantI2_read)

        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_InstantI2: %s", e)


#------------------------------------------------------------------
#    Read InstantI3 attribute
#------------------------------------------------------------------
    def read_InstantI3(self, attr):
        print "In ", self.get_name(), "::read_InstantI3()"
        
        #    Add your own code here
        try:
            attr_InstantI3_read = float(self.AlbaElectr.getInstantMeasure('3'))
            attr.set_value(attr_InstantI3_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_InstantI3: %s", e)


#------------------------------------------------------------------
#    Read InstantI4 attribute
#------------------------------------------------------------------
    def read_InstantI4(self, attr):
        print "In ", self.get_name(), "::read_InstantI4()"
        
        #    Add your own code here
       
        try:
            attr_InstantI4_read = float(self.AlbaElectr.getInstantMeasure('4'))
            attr.set_value(attr_InstantI4_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_InstantI4: %s", e)


#------------------------------------------------------------------
#    Read AllChannels attribute
#------------------------------------------------------------------
    def read_AllChannels(self, attr):
        print "In ", self.get_name(), "::read_AllChannels()"
        
        #    Add your own code here
        try:
            measures = self.AlbaElectr.getMeasuresAll()[0]
            for i,value in enumerate(measures): 
                self._allMeasures[i] = float(value[1])
            attr.set_value(self._allMeasures, 4)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AllChannels: %s", e)

#------------------------------------------------------------------
#    Read LastValues attribute
#------------------------------------------------------------------
    def read_LastValues(self, attr):
        print "In ", self.get_name(), "::read_LastValues()"
        
        #    Add your own code here
        try:
            _lastValues = ['0','0','0','0']
            lastValues = None
            lastValues = self.AlbaElectr.getLdata()
            #lastValues = self.AlbaElectr.getData(0)
            if lastValues != None:
                for i,value in enumerate(lastValues[0]): 
                    _lastValues[i] = float(value[1])
                attr.set_value(_lastValues, 4)
                
            else:
                self.my_logger.error('lastValues = None !!')
        except Exception, e:
            try:
                measures = self.AlbaElectr.getMeasuresAll()[0]
                for i,value in enumerate(measures): 
                    _lastValues[i] = float(value[1])
                attr.set_value(_lastValues, 4)
            except Exception,e:
                self.set_state(PyTango.DevState.FAULT)
                self.my_logger.error("Exception in read_LastValues: %s", e)
                self.my_logger.error("lastValues: %s", str(_lastValues))                
                
#------------------------------------------------------------------
#    Read range_ch1 attribute
#------------------------------------------------------------------
    def read_range_ch1(self, attr):
        print "In ", self.get_name(), "::read_range_ch1()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['1'])
            attr_range_ch1_read = rgs[0]
            attr.set_value(attr_range_ch1_read[1])
            self.AllRanges[0] = attr_range_ch1_read[1]
            if self.attr_I1_read != None:
                self.checkRanges(attr,self.attr_I1_read,0)
        except Exception, e:
            #print("Error reading range_ch1!: %s" %e)
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_range_ch1: %s", e)


#------------------------------------------------------------------
#    Write range_ch1 attribute
#------------------------------------------------------------------
    def write_range_ch1(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data
        print type(data[0])

        #    Add your own code here
        self.AlbaElectr.setRanges([['1', data[0]]])
        self.AllRanges[0] = data[0]
        print str(self.AlbaElectr.getRanges(['1']))

#------------------------------------------------------------------
#    Read range_ch2 attribute
#------------------------------------------------------------------
    def read_range_ch2(self, attr):
        print "In ", self.get_name(), "::read_range_ch2()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['2'])
            attr_range_ch2_read = rgs[0]
            attr.set_value(attr_range_ch2_read[1])
            self.AllRanges[1] = attr_range_ch2_read[1]
            if self.attr_I2_read != None:
                self.checkRanges(attr,self.attr_I2_read,1)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_range_ch2: %s", e)


#------------------------------------------------------------------
#    Write range_ch2 attribute
#------------------------------------------------------------------
    def write_range_ch2(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setRanges([['2', data[0]]])
        self.AllRanges[1] = data[0]
        print str(self.AlbaElectr.getRanges(['2']))

#------------------------------------------------------------------
#    Read range_ch3 attribute
#------------------------------------------------------------------
    def read_range_ch3(self, attr):
        print "In ", self.get_name(), "::read_range_ch3()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['3'])
            attr_range_ch3_read = rgs[0]
            attr.set_value(attr_range_ch3_read[1])
            self.AllRanges[2] = attr_range_ch3_read[1]
            if self.attr_I3_read != None:
                self.checkRanges(attr,self.attr_I3_read,2)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_range_ch3: %s", e)


#------------------------------------------------------------------
#    Write range_ch3 attribute
#------------------------------------------------------------------
    def write_range_ch3(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here        
        self.AlbaElectr.setRanges([['3', data[0]]])
        self.AllRanges[2] = data[0]
        print str(self.AlbaElectr.getRanges(['3']))

#------------------------------------------------------------------
#    Read range_ch4 attribute
#------------------------------------------------------------------
    def read_range_ch4(self, attr):
        print "In ", self.get_name(), "::read_range_ch4()"
        
        #    Add your own code here
        try:
            rgs = self.AlbaElectr.getRanges(['4'])
            attr_range_ch4_read = rgs[0]
            attr.set_value(attr_range_ch4_read[1])
            self.AllRanges[3] = attr_range_ch4_read[1]
            if self.attr_I4_read != None:
                self.checkRanges(attr,self.attr_I4_read,3)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_range_ch4: %s", e)


#------------------------------------------------------------------
#    Write range_ch4 attribute
#------------------------------------------------------------------
    def write_range_ch4(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setRanges([['4', data[0]]])
        self.AllRanges[3] = data[0]
        print str(self.AlbaElectr.getRanges(['4']))

#------------------------------------------------------------------
#    Read AutoRange_ch1 attribute
#------------------------------------------------------------------
    def read_AutoRange_ch1(self, attr):
        print "In ", self.get_name(), "::read_AutoRange_ch1()"
        
        #    Add your own code here
        try:
            autoR = self.AlbaElectr.getAutoRange(['1'])
            if autoR[0][1] == 'YES':
                attr_AutoRange_read = True
            elif autoR[0][1] == 'NO':
                attr_AutoRange_read = False
            else:
                raise Exception('read_AutoRange_ch1: Wrong reading')
            attr.set_value(attr_AutoRange_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch1: %s", e)


#------------------------------------------------------------------
#    Write Auto _ch1 attribute
#------------------------------------------------------------------
    def write_AutoRange_ch1(self, attr):
        print "In ", self.get_name(), "::write_AutoRange_ch1()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        if data[0]:
            self.AlbaElectr.setAutoRange([['1','YES']])
        else:
            self.AlbaElectr.setAutoRange([['1','NO']])
            
        print str(self.AlbaElectr.getAutoRange(['1']))

#------------------------------------------------------------------
#    Read AutoRange_ch2 attribute
#------------------------------------------------------------------
    def read_AutoRange_ch2(self, attr):
        print "In ", self.get_name(), "::read_AutoRange_ch2()"
        
        #    Add your own code here
        try:
            autoR = self.AlbaElectr.getAutoRange(['2'])
            if autoR[0][1] == 'YES':
                attr_AutoRange_read = True
            elif autoR[0][1] == 'NO':
                attr_AutoRange_read = False
            else:
                raise Exception('read_AutoRange_ch2: Wrong reading')
            attr.set_value(attr_AutoRange_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch2: %s", e)


#------------------------------------------------------------------
#    Write AutoRange_ch2 attribute
#------------------------------------------------------------------
    def write_AutoRange_ch2(self, attr):
        print "In ", self.get_name(), "::write_AutoRange_ch2()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        if data[0]:
            self.AlbaElectr.setAutoRange([['2','YES']])
        else:
            self.AlbaElectr.setAutoRange([['2','NO']])
            
        print str(self.AlbaElectr.getAutoRange(['2']))
        
#------------------------------------------------------------------
#    Read AutoRange_ch3 attribute
#------------------------------------------------------------------
    def read_AutoRange_ch3(self, attr):
        print "In ", self.get_name(), "::read_AutoRange_ch3()"
        
        #    Add your own code here
        try:
            autoR = self.AlbaElectr.getAutoRange(['3'])
            if autoR[0][1] == 'YES':
                attr_AutoRange_read = True
            elif autoR[0][1] == 'NO':
                attr_AutoRange_read = False
            else:
                raise Exception('read_AutoRange_ch3: Wrong reading')
            attr.set_value(attr_AutoRange_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch3: %s", e)


#------------------------------------------------------------------
#    Write AutoRange_ch3 attribute
#------------------------------------------------------------------
    def write_AutoRange_ch3(self, attr):
        print "In ", self.get_name(), "::write_AutoRange_ch3()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        if data[0]:
            self.AlbaElectr.setAutoRange([['3','YES']])
        else:
            self.AlbaElectr.setAutoRange([['3','NO']])
            
        print str(self.AlbaElectr.getAutoRange(['3']))
        
#------------------------------------------------------------------
#    Read AutoRange_ch4 attribute
#------------------------------------------------------------------
    def read_AutoRange_ch4(self, attr):
        print "In ", self.get_name(), "::read_AutoRange_ch4()"
        
        #    Add your own code here
        try:
            autoR = self.AlbaElectr.getAutoRange(['4'])
            if autoR[0][1] == 'YES':
                attr_AutoRange_read = True
            elif autoR[0][1] == 'NO':
                attr_AutoRange_read = False
            else:
                raise Exception('read_AutoRange_ch4: Wrong reading')
            attr.set_value(attr_AutoRange_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch4: %s", e)


#------------------------------------------------------------------
#    Write AutoRange_ch4 attribute
#------------------------------------------------------------------
    def write_AutoRange_ch4(self, attr):
        print "In ", self.get_name(), "::write_AutoRange_ch4()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        if data[0]:
            self.AlbaElectr.setAutoRange([['4','YES']])
        else:
            self.AlbaElectr.setAutoRange([['4','NO']])
            
        print str(self.AlbaElectr.getAutoRange(['4']))

#------------------------------------------------------------------
#    Read AutoRangeMin_ch1 attribute
#------------------------------------------------------------------
    def read_AutoRangeMin_ch1(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMin_ch1()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMin_read = self.AlbaElectr.getAutoRangeMin(['1'])
            
            attr.set_value(int(attr_AutoRangeMin_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch2: %s", e)


#------------------------------------------------------------------
#    Write AutoRangeMin_ch1 attribute
#------------------------------------------------------------------
    def write_AutoRangeMin_ch1(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMin_ch1()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMin([['1',data[0]]])
            
        print str(self.AlbaElectr.getAutoRangeMin(['1']))

#------------------------------------------------------------------
#    Read AutoRangeMin_ch2 attribute
#------------------------------------------------------------------
    def read_AutoRangeMin_ch2(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMin_ch2()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMin_read = self.AlbaElectr.getAutoRangeMin(['2'])
            
            attr.set_value(int(attr_AutoRangeMin_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch2: %s", e)


#------------------------------------------------------------------
#    Write AutoRangeMin_ch2 attribute
#------------------------------------------------------------------
    def write_AutoRangeMin_ch2(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMin_ch2()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMin([['2',data[0]]])
            
        print str(self.AlbaElectr.getAutoRangeMin(['2']))

#------------------------------------------------------------------
#    Read AutoRangeMin_ch3 attribute
#------------------------------------------------------------------
    def read_AutoRangeMin_ch3(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMin_ch3()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMin_read = self.AlbaElectr.getAutoRangeMin(['3'])
            
            attr.set_value(int(attr_AutoRangeMin_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch3: %s", e)
            
#------------------------------------------------------------------
#    Write AutoRange_ch3 attribute
#------------------------------------------------------------------
    def write_AutoRangeMin_ch3(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMin_ch3()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMin([['3',data[0]]])            
        print str(self.AlbaElectr.getAutoRangeMin(['3']))

#------------------------------------------------------------------
#    Read AutoRangeMin_ch4 attribute
#------------------------------------------------------------------
    def read_AutoRangeMin_ch4(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMin_ch4()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMin_read = self.AlbaElectr.getAutoRangeMin(['4'])
            
            attr.set_value(int(attr_AutoRangeMin_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRange_ch4: %s", e)


#------------------------------------------------------------------
#    Write AutoRange_ch4 attribute
#------------------------------------------------------------------
    def write_AutoRangeMin_ch4(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMin_ch4()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMin([['4',data[0]]])
            
        print str(self.AlbaElectr.getAutoRangeMin(['4']))


#------------------------------------------------------------------
#    Read AutoRangeMax_ch1 attribute
#------------------------------------------------------------------
    def read_AutoRangeMax_ch1(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMax_ch1()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMax_read = self.AlbaElectr.getAutoRangeMax(['1'])
            
            attr.set_value(int(attr_AutoRangeMax_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRangeMax_ch1: %s", e)


#------------------------------------------------------------------
#    Write AutoRangeMax_ch1 attribute
#------------------------------------------------------------------
    def write_AutoRangeMax_ch1(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMax_ch1()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMax([['1',data[0]]])
            
        print str(self.AlbaElectr.getAutoRangeMax(['1']))

#------------------------------------------------------------------
#    Read AutoRangeMax_ch2 attribute
#------------------------------------------------------------------
    def read_AutoRangeMax_ch2(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMax_ch2()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMax_read = self.AlbaElectr.getAutoRangeMax(['2'])
            
            attr.set_value(int(attr_AutoRangeMax_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRangeMax_ch2: %s", e)


#------------------------------------------------------------------
#    Write AutoRangeMax_ch2 attribute
#------------------------------------------------------------------
    def write_AutoRangeMax_ch2(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMax_ch2()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMax([['2',data[0]]])
            
        print str(self.AlbaElectr.getAutoRangeMax(['2']))

#------------------------------------------------------------------
#    Read AutoRangeMax_ch3 attribute
#------------------------------------------------------------------
    def read_AutoRangeMax_ch3(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMax_ch3()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMax_read = self.AlbaElectr.getAutoRangeMax(['3'])
            
            attr.set_value(int(attr_AutoRangeMax_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRangeMax_ch3: %s", e)
            
#------------------------------------------------------------------
#    Write AutoRangeMax_ch3 attribute
#------------------------------------------------------------------
    def write_AutoRangeMax_ch3(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMax_ch3()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMax([['3',data[0]]])            
        print str(self.AlbaElectr.getAutoRangeMax(['3']))

#------------------------------------------------------------------
#    Read AutoRangeMax_ch4 attribute
#------------------------------------------------------------------
    def read_AutoRangeMax_ch4(self, attr):
        print "In ", self.get_name(), "::read_AutoRangeMax_ch4()"
        
        #    Add your own code here
        try:
            attr_AutoRangeMax_read = self.AlbaElectr.getAutoRangeMax(['4'])
            
            attr.set_value(int(attr_AutoRangeMax_read[0][1]))
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_AutoRangeMax_ch4: %s", e)


#------------------------------------------------------------------
#    Write AutoRangeMax_ch4 attribute
#------------------------------------------------------------------
    def write_AutoRangeMax_ch4(self, attr):
        print "In ", self.get_name(), "::write_AutoRangeMax_ch4()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setAutoRangeMax([['4',data[0]]])
            
        print str(self.AlbaElectr.getAutoRangeMax(['4']))

#------------------------------------------------------------------
#    Read Ranges attribute
#------------------------------------------------------------------
    def read_Ranges(self, attr):
        print "In ", self.get_name(), "::read_Ranges()"
        
        #    Add your own code here
        try:
            self.getAllRanges()
            attr_Ranges_read = self.AllRanges
            attr.set_value(attr_Ranges_read, 4)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_Ranges: %s", e)


#------------------------------------------------------------------
#    Write Ranges attribute
#------------------------------------------------------------------
    def write_Ranges(self, attr):
        print "In ", self.get_name(), "::write_Ranges()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        d = data[0].split(',')
        ranges = []
        for i,range in enumerate(d):
            r = [str(i+1),d[i]]
            ranges.append(r)
            self.AllRanges[i] = d[i]
#        print "Ranges to write: %s" %ranges
        self.AlbaElectr.setRanges(ranges)

        print str(self.AlbaElectr.getRanges(['1','2','3','4']))

#------------------------------------------------------------------
#    Read filter_ch1 attribute
#------------------------------------------------------------------
    def read_filter_ch1(self, attr):
        print "In ", self.get_name(), "::read_filter_ch1()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['1'])
            attr_filter_ch1_read = fltr[0]
            attr.set_value(attr_filter_ch1_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_filter_ch1: %s", e)


#------------------------------------------------------------------
#    Write filter_ch1 attribute
#------------------------------------------------------------------
    def write_filter_ch1(self, attr):
        print "In ", self.get_name(), "::write_filter_ch1()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['1', data[0]]])
        print str(self.AlbaElectr.getFilters(['1']))


#------------------------------------------------------------------
#    Read filter_ch2 attribute
#------------------------------------------------------------------
    def read_filter_ch2(self, attr):
        print "In ", self.get_name(), "::read_filter_ch2()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['2'])
            attr_filter_ch2_read = fltr[0]
            attr.set_value(attr_filter_ch2_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_filter_ch2: %s", e)


#------------------------------------------------------------------
#    Write filter_ch2 attribute
#------------------------------------------------------------------
    def write_filter_ch2(self, attr):
        print "In ", self.get_name(), "::write_filter_ch2()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['2', data[0]]])
        print str(self.AlbaElectr.getFilters(['2']))


#------------------------------------------------------------------
#    Read filter_ch3 attribute
#------------------------------------------------------------------
    def read_filter_ch3(self, attr):
        print "In ", self.get_name(), "::read_filter_ch3()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['3'])
            attr_filter_ch3_read = fltr[0]
            attr.set_value(attr_filter_ch3_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_filter_ch3: %s", e)


#------------------------------------------------------------------
#    Write filter_ch3 attribute
#------------------------------------------------------------------
    def write_filter_ch3(self, attr):
        print "In ", self.get_name(), "::write_filter_ch3()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['3', data[0]]])
        print str(self.AlbaElectr.getFilters(['3']))

#------------------------------------------------------------------
#    Read filter_ch4 attribute
#------------------------------------------------------------------
    def read_filter_ch4(self, attr):
        print "In ", self.get_name(), "::read_filter_ch4()"
        
        #    Add your own code here
        try:
            fltr = self.AlbaElectr.getFilters(['4'])
            attr_filter_ch4_read = fltr[0]
            attr.set_value(attr_filter_ch4_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_filter_ch4: %s", e)


#------------------------------------------------------------------
#    Write filter_ch4 attribute
#------------------------------------------------------------------
    def write_filter_ch4(self, attr):
        print "In ", self.get_name(), "::write_filter_ch4()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFilters([['4', data[0]]])
        print str(self.AlbaElectr.getFilters(['4']))

#------------------------------------------------------------------
#    Read Filters attribute
#------------------------------------------------------------------
    def read_Filters(self, attr):
        print "In ", self.get_name(), "::read_Filters()"
        
        #    Add your own code here
        try:
            fltrs = self.AlbaElectr.getFiltersAll()
            fltrsList = []
            for i in fltrs: fltrsList.append(i[1])
            attr_Filters_read = fltrsList
            attr.set_value(attr_Filters_read, 4)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_Filters: %s", e)


#------------------------------------------------------------------
#    Write Filters attribute
#------------------------------------------------------------------
    def write_Filters(self, attr):
        print "In ", self.get_name(), "::write_Filters()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setFiltersAll(data[0])

        print str(self.AlbaElectr.getFiltersAll())
        
        

#------------------------------------------------------------------
#    Read dInversion_ch1 attribute
#------------------------------------------------------------------
    def read_dInversion_ch1(self, attr):
        print "In ", self.get_name(), "::read_dInversion_ch1()"
        
        #    Add your own code here
        try:
            dInv = self.AlbaElectr.getDInvs(['1'])
            attr_dInversion_ch1_read = dInv[0]
            attr.set_value(attr_dInversion_ch1_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_dInversion_ch1: %s", e)


#------------------------------------------------------------------
#    Write dInversion_ch1 attribute
#------------------------------------------------------------------
    def write_dInversion_ch1(self, attr):
        print "In ", self.get_name(), "::write_dInversion_ch1()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setDInvs([['1', data[0]]])
        print str(self.AlbaElectr.getDInvs(['1']))



#------------------------------------------------------------------
#    Read dInversion_ch2 attribute
#------------------------------------------------------------------
    def read_dInversion_ch2(self, attr):
        print "In ", self.get_name(), "::read_dInversion_ch2()"
        
        #    Add your own code here
        try:
            dInv = self.AlbaElectr.getDInvs(['2'])
            attr_dInversion_ch1_read = dInv[0]
            attr.set_value(attr_dInversion_ch1_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_dInversion_ch2: %s", e)


#------------------------------------------------------------------
#    Write dInversion_ch2 attribute
#------------------------------------------------------------------
    def write_dInversion_ch2(self, attr):
        print "In ", self.get_name(), "::write_dInversion_ch2()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setDInvs([['2', data[0]]])
        print str(self.AlbaElectr.getDInvs(['2']))

#------------------------------------------------------------------
#    Read dInversion_ch3 attribute
#------------------------------------------------------------------
    def read_dInversion_ch3(self, attr):
        print "In ", self.get_name(), "::read_dInversion_ch3()"
        
        #    Add your own code here
        try:
            dInv = self.AlbaElectr.getDInvs(['3'])
            attr_dInversion_ch1_read = dInv[0]
            attr.set_value(attr_dInversion_ch1_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_dInversion_ch3: %s", e)


#------------------------------------------------------------------
#    Write dInversion_ch3 attribute
#------------------------------------------------------------------
    def write_dInversion_ch3(self, attr):
        print "In ", self.get_name(), "::write_dInversion_ch3()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setDInvs([['3', data[0]]])
        print str(self.AlbaElectr.getDInvs(['3']))


#------------------------------------------------------------------
#    Read dInversion_ch4 attribute
#------------------------------------------------------------------
    def read_dInversion_ch4(self, attr):
        print "In ", self.get_name(), "::read_dInversion_ch4()"
        
        #    Add your own code here
        try:
            dInv = self.AlbaElectr.getDInvs(['4'])
            attr_dInversion_ch1_read = dInv[0]
            attr.set_value(attr_dInversion_ch1_read[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_dInversion_ch4: %s", e)


#------------------------------------------------------------------
#    Write dInversion_ch4 attribute
#------------------------------------------------------------------
    def write_dInversion_ch4(self, attr):
        print "In ", self.get_name(), "::write_dInversion_ch4()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setDInvs([['4', data[0]]])
        print str(self.AlbaElectr.getDInvs(['4']))


#------------------------------------------------------------------
#    Read dInversions attribute
#------------------------------------------------------------------
    def read_dInversions(self, attr):
        print "In ", self.get_name(), "::read_dInversions()"
        
        #    Add your own code here
        try:
            dInvs = self.AlbaElectr.getDInvsAll()
            dInvsList = []
            for i in dInvs: dInvsList.append(i[1])
            attr_dInvs_read = dInvsList
            attr.set_value(attr_dInvs_read, 4)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_dInversions: %s", e)


#------------------------------------------------------------------
#    Write dInversions attribute
#------------------------------------------------------------------
    def write_dInversions(self, attr):
        print "In ", self.get_name(), "::write_dInversions()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.AlbaElectr.setDInvsAll(data[0])

        print str(self.AlbaElectr.getDInvsAll())



#------------------------------------------------------------------
#    Read offset_ch1 attribute
#------------------------------------------------------------------
    def read_offset_ch1(self, attr):
        print "In ", self.get_name(), "::read_offset_ch1()"
        
        #    Add your own code here
        try:
            offset = float(self.AlbaElectr.getOffsetCorr(self.AllRanges[0], 1))
            offset = (self.dictRanges[self.AllRanges[0]] * self._offsetPercentages[0]) / 100.0
            attr_offset_ch1_read = offset
            attr.set_value(attr_offset_ch1_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_ch1: %s", e)

#------------------------------------------------------------------
#    Read offset_ch2 attribute
#------------------------------------------------------------------
    def read_offset_ch2(self, attr):
        print "In ", self.get_name(), "::read_offset_ch2()"
        
        #    Add your own code here
        try:
            offset = float(self.AlbaElectr.getOffsetCorr(self.AllRanges[1], 2))
            offset = (self.dictRanges[self.AllRanges[1]] * self._offsetPercentages[1]) / 100.0
            attr_offset_ch2_read = offset
            attr.set_value(attr_offset_ch2_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_ch2: %s", e)

#------------------------------------------------------------------
#    Read offset_ch3 attribute
#------------------------------------------------------------------
    def read_offset_ch3(self, attr):
        print "In ", self.get_name(), "::read_offset_ch3()"
        
        #    Add your own code here
        try:
            offset = float(self.AlbaElectr.getOffsetCorr(self.AllRanges[2], 3))
            offset = (self.dictRanges[self.AllRanges[2]] * self._offsetPercentages[2]) / 100.0
            attr_offset_ch3_read = offset
            attr.set_value(attr_offset_ch3_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_ch3: %s", e)

#------------------------------------------------------------------
#    Read offset_ch4 attribute
#------------------------------------------------------------------
    def read_offset_ch4(self, attr):
        print "In ", self.get_name(), "::read_offset_ch4()"
        
        #    Add your own code here
        try:
            offset = float(self.AlbaElectr.getOffsetCorr(self.AllRanges[3], 4))
            offset = (self.dictRanges[self.AllRanges[3]] * self._offsetPercentages[3]) / 100.0
            attr_offset_ch4_read = offset
            attr.set_value(attr_offset_ch4_read)
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_ch4: %s", e)

#------------------------------------------------------------------
#    Read offset_ch1 attribute
#------------------------------------------------------------------
    def read_offset_percentage_ch1(self, attr):
        print "In ", self.get_name(), "::read_offset_percentage_ch1()"
        
        #    Add your own code here
        try:
            attr.set_value(self._offsetPercentages[0])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_percentage_ch1: %s", e)


#------------------------------------------------------------------
#    Write offset_percentage_ch1 attribute
#------------------------------------------------------------------
    def write_offset_percentage_ch1(self, attr):
        self.info_stream('!!!Writing offset percentage ch1 done!!!')
        print "In ", self.get_name(), "::write_offset_percentage_ch1()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self._offsetPercentages[0] = data[0]
        self.info_stream('!!!Writing offset percentage ch1 done!!!')
        offset = data[0]/100.0
        thread.start_new_thread(self.changeOffsets,([1],offset))
        
#------------------------------------------------------------------
#    Read offset_ch2 attribute
#------------------------------------------------------------------
    def read_offset_percentage_ch2(self, attr):
        print "In ", self.get_name(), "::read_offset_percentage_ch2()"
        
        #    Add your own code here
        try:
            attr.set_value(self._offsetPercentages[1])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_percentage_ch2: %s", e)


#------------------------------------------------------------------
#    Write offset_percentage_ch2 attribute
#------------------------------------------------------------------
    def write_offset_percentage_ch2(self, attr):
        print "In ", self.get_name(), "::write_offset_percentage_ch2()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self._offsetPercentages[1] = data[0]
        offset = data[0]/100.0
        thread.start_new_thread(self.changeOffsets,([2],offset))
        

#------------------------------------------------------------------
#    Read offset_ch3 attribute
#------------------------------------------------------------------
    def read_offset_percentage_ch3(self, attr):
        print "In ", self.get_name(), "::read_offset_percentage_ch3()"
        
        #    Add your own code here
        try:
            attr.set_value(self._offsetPercentages[2])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_percentage_ch3: %s", e)


#------------------------------------------------------------------
#    Write offset_percentage_ch3 attribute
#------------------------------------------------------------------
    def write_offset_percentage_ch3(self, attr):
        print "In ", self.get_name(), "::write_offset_percentage_ch3()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self._offsetPercentages[2] = data[0]
        offset = data[0]/100.0
        thread.start_new_thread(self.changeOffsets,([3],offset))
        
        
#------------------------------------------------------------------
#    Read offset_ch4 attribute
#------------------------------------------------------------------
    def read_offset_percentage_ch4(self, attr):
        print "In ", self.get_name(), "::read_offset_percentage_ch4()"
        
        #    Add your own code here
        try:
            attr.set_value(self._offsetPercentages[3])
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
            self.my_logger.error("Exception in read_offset_percentage_ch4: %s", e)


#------------------------------------------------------------------
#    Write offset_percentage_ch4 attribute
#------------------------------------------------------------------
    def write_offset_percentage_ch4(self, attr):
        print "In ", self.get_name(), "::write_offset_percentage_ch4()"
        
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self._offsetPercentages[3] = data[0]
        offset = data[0]/100.0
        thread.start_new_thread(self.changeOffsets,([4],offset))
        
#------------------------------------------------------------------
#    Read ChannelsNames attribute
#------------------------------------------------------------------
    def read_ChannelsNames(self, attr):
        print "In ", self.get_name(), "::read_ChannelsNames()"
        
        #    Add your own code here
        attr.set_value(self._channelsNames, 4)

#------------------------------------------------------------------
#    Write ChannelsNames attribute
#------------------------------------------------------------------
    def write_ChannelsNames(self, attr):
        print "In ", self.get_name(), "::write_ChannelsNames()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self._channelsNames = data
        print str(self._channelsNames)
        
        
#------------------------------------------------------------------
#    Read TriggerMode attribute
#------------------------------------------------------------------
    def read_TriggerMode(self, attr):
        print "In ", self.get_name(), "::read_TriggerMode()"
        
        #    Add your own code here
        try:
            mode = self.AlbaElectr.getTrigmode()
            attr.set_value(mode)
        except Exception,e:
            self.my_logger.error("Exception reading TriggerMode: %s", e)
            self.set_state(PyTango.DevState.FAULT)

#------------------------------------------------------------------
#    Write TriggerMode attribute
#------------------------------------------------------------------
    def write_TriggerMode(self, attr):
        print "In ", self.get_name(), "::write_TriggerMode()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        try:
            self.AlbaElectr.setTrigmode(data[0])
            print str(data[0])
        except Exception, e:
            self.my_logger.error("Exception setting trigger mode: %s",e)
            raise
        
#------------------------------------------------------------------
#    Read TriggerPeriod attribute
#------------------------------------------------------------------
    def read_TriggerPeriod(self, attr):
        print "In ", self.get_name(), "::read_TriggerPeriode()"
        
        #    Add your own code here
        try:
            period = float(self.AlbaElectr.getTrigperiod())
            period = period/1000.0
            attr.set_value(period)
        except Exception,e:
            self.my_logger.error("Exception reading TriggerPeriod: %s", e)
            self.set_state(PyTango.DevState.FAULT)

#------------------------------------------------------------------
#    Write TriggerPeriod attribute
#------------------------------------------------------------------
    def write_TriggerPeriod(self, attr):
        print "In ", self.get_name(), "::write_TriggerPeriod()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        try:
            period = data[0]*1000.0
            self.AlbaElectr.setTrigperiod(period)
            print str(period)
        except Exception, e:
            self.my_logger.error("Exception setting trigger period: %s",e)
            raise

#------------------------------------------------------------------
#    Read TriggerDelay attribute
#------------------------------------------------------------------
    def read_TriggerDelay(self, attr):
        print "In ", self.get_name(), "::read_TriggerDelay()"
        
        #    Add your own code here
        try:
            delay = float(self.AlbaElectr.getTrigDelay())
            delay = delay/1000.0
            attr.set_value(delay)
        except Exception,e:
            self.my_logger.error("Exception reading TriggerDelay: %s", e)
            self.set_state(PyTango.DevState.FAULT)

#------------------------------------------------------------------
#    Write TriggerDelay attribute
#------------------------------------------------------------------
    def write_TriggerDelay(self, attr):
        print "In ", self.get_name(), "::write_TriggerDelay()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        try:
            delay = data[0]*1000.0
            self.AlbaElectr.setTrigDelay(delay)
            print str(delay)
        except Exception, e:
            self.my_logger.error("Exception setting trigger delay: %s",e)
            raise


#------------------------------------------------------------------
#    Read BufferSize attribute
#------------------------------------------------------------------
    def read_BufferSize(self, attr):
        print "In ", self.get_name(), "::read_BufferSize()"
        
        #    Add your own code here
        try:
            self.__numOfPoints = int(self.AlbaElectr.getPoints())
            attr.set_value(self.__numOfPoints)
        except Exception,e:
            self.my_logger.error("Exception reading BufferSize: %s", e)
            self.set_state(PyTango.DevState.FAULT)

#------------------------------------------------------------------
#    Write BufferSize attribute
#------------------------------------------------------------------
    def write_BufferSize(self, attr):
        print "In ", self.get_name(), "::write_BufferSize()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        try:
            self.__numOfPoints = data[0]
            self.AlbaElectr.setPoints(self.__numOfPoints)
            print str(self.__numOfPoints)
        except Exception, e:
            self.my_logger.error("Exception setting BufferSize: %s",e)
            raise 
  
#------------------------------------------------------------------
#    Read AvSamples attribute
#------------------------------------------------------------------
    def read_AvSamples(self, attr):
        print "In ", self.get_name(), "::read_AvSamples()"
        
        #    Add your own code here
        try:
            avSamples = float(self.AlbaElectr.getAvsamples())
            avSamples = avSamples/1000.0
            attr.set_value(avSamples)
        except Exception,e:
            self.my_logger.error("Exception reading AvSamples: %s", e)
            self.set_state(PyTango.DevState.FAULT)

#------------------------------------------------------------------
#    Write AvSamples attribute
#------------------------------------------------------------------
    def write_AvSamples(self, attr):
        print "In ", self.get_name(), "::write_AvSamples()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        try:
            avSamples = data[0]*1000.0
            self.AlbaElectr.setAvsamples(avSamples)
            print str(avSamples)
        except Exception, e:
            self.my_logger.error("Exception setting AvSamples: %s",e)
            raise  

#------------------------------------------------------------------
#    Read SampleRate attribute
#------------------------------------------------------------------
    def read_SampleRate(self, attr):
        print "In ", self.get_name(), "::read_SampleRate()"
        
        #    Add your own code here
        try:
            sampleRate = int(self.AlbaElectr.getSrate())
            sampleRate = sampleRate/1000.0
            attr.set_value(sampleRate)
        except Exception,e:
            self.my_logger.error("Exception reading SampleRate: %s", e)
            self.set_state(PyTango.DevState.FAULT)

#------------------------------------------------------------------
#    Write SampleRate attribute
#------------------------------------------------------------------
    def write_SampleRate(self, attr):
        print "In ", self.get_name(), "::write_SampleRate()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        try:
            sampleRate = data[0]*1000.0
            self.AlbaElectr.setSrate(sampleRate)
            print str(sampleRate)
        except Exception, e:
            self.my_logger.error("Exception setting SampleRate: %s",e)
            raise  


#------------------------------------------------------------------
#    Read BufferI1 attribute
#------------------------------------------------------------------
    def read_BufferI1(self, attr):
        print "In ", self.get_name(), "::read_BufferI1()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(1)
            length = len(data)
            attr.set_value(data, length)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI1: %s", e)
            raise

#------------------------------------------------------------------
#    Read BufferI1Mean attribute
#------------------------------------------------------------------
    def read_BufferI1Mean(self, attr):
        print "In ", self.get_name(), "::read_BufferI1Mean()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(1)
            length = len(data)
            mean = sum(data) / length
            attr.set_value(mean)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI1Mean: %s", e)
            raise

#------------------------------------------------------------------
#    Read BufferI2 attribute
#------------------------------------------------------------------
    def read_BufferI2(self, attr):
        print "In ", self.get_name(), "::read_BufferI2()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(2)
            length = len(data)
            attr.set_value(data, length)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI2: %s", e)
            raise

#------------------------------------------------------------------
#    Read BufferI2Mean attribute
#------------------------------------------------------------------
    def read_BufferI2Mean(self, attr):
        print "In ", self.get_name(), "::read_BufferI2Mean()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(2)
            length = len(data)
            mean = sum(data) / length
            attr.set_value(mean)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI2Mean: %s", e)
            raise

#------------------------------------------------------------------
#    Read BufferI2 attribute
#------------------------------------------------------------------
    def read_BufferI3(self, attr):
        print "In ", self.get_name(), "::read_BufferI3()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(3)
            length = len(data)
            attr.set_value(data, length)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI3: %s", e)
            raise

#------------------------------------------------------------------
#    Read BufferI3Mean attribute
#------------------------------------------------------------------
    def read_BufferI3Mean(self, attr):
        print "In ", self.get_name(), "::read_BufferI3Mean()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(3)
            length = len(data)
            mean = sum(data) / length
            attr.set_value(mean)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI3Mean: %s", e)
            raise

#------------------------------------------------------------------
#    Read BufferI4 attribute
#------------------------------------------------------------------
    def read_BufferI4(self, attr):
        print "In ", self.get_name(), "::read_BufferI4()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(4)
            length = len(data)
            attr.set_value(data, length)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI4: %s", e)
            raise

#------------------------------------------------------------------
#    Read BufferI4Mean attribute
#------------------------------------------------------------------
    def read_BufferI4Mean(self, attr):
        print "In ", self.get_name(), "::read_BufferI4Mean()"
        
        #    Add your own code here
        try:
            data = self.AlbaElectr.getAvData(4)
            length = len(data)
            mean = sum(data) / length
            attr.set_value(mean)
        except Exception, e:
            self.my_logger.error("Exception reading BufferI4Mean: %s", e)
            raise

#------------------------------------------------------------------
#    Read Firmware_version attribute
#------------------------------------------------------------------
    def read_Firmware_version(self, attr):
        print "In ", self.get_name(), "::read_Firmware_version()"
        
        #    Add your own code here
        try:
            firmware = self.AlbaElectr.extractSimple(self.AlbaElectr.ask('?FIM'))
            attr.set_value(firmware)
        except Exception, e:
            self.my_logger.error("Exception reading Firmware_version: %s", e)
            raise

#------------------------------------------------------------------
#    Read AlbaEmIP attribute
#------------------------------------------------------------------
    def read_AlbaEmIP(self, attr):
        print "In ", self.get_name(), "::read_AlbaEmIP()"
        
        #    Add your own code here
        try:
            ip = self.AlbaElectr.extractSimple(self.AlbaElectr.ask('?DEVIP'))
            attr.set_value(ip)
        except Exception, e:
            self.my_logger.error("Exception reading AlbaEmIP: %s", e)
            raise


#------------------------------------------------------------------
#    Read AlbaEmMAC attribute
#------------------------------------------------------------------
    def read_AlbaEmMAC(self, attr):
        print "In ", self.get_name(), "::read_AlbaEmMAC()"
        
        #    Add your own code here
        try:
            mac = self.AlbaElectr.extractSimple(self.AlbaElectr.ask('?DEVMAC'))
            attr.set_value(mac)
        except Exception, e:
            self.my_logger.error("Exception reading AlbaEmMAC: %s", e)
            raise

#------------------------------------------------------------------
#    My own methods
#------------------------------------------------------------------
    def checkRanges(self,attr,current,axis):

        dictMinRanges = {'1mA':1e-6,'100uA':1e-7,'10uA':1e-8,'1uA':1e-9,
                         '100nA':1e-10,'10nA':1e-11,'1nA':1e-12,'100pA':1e-13}
        dictMaxRanges = {'1mA':1e-3,'100uA':1e-4,'10uA':1e-5,'1uA':1e-6,
                         '100nA':1e-7,'10nA':1e-8,'1nA':1e-9,'100pA':1e-10}
        
        if math.fabs(current) >= dictMaxRanges[self.AllRanges[axis]]:
            attr.set_quality(PyTango.AttrQuality.ATTR_WARNING)
        elif math.fabs(current) <= dictMinRanges[self.AllRanges[axis]]:
            attr.set_quality(PyTango.AttrQuality.ATTR_WARNING)
        else:
            attr.set_quality(PyTango.AttrQuality.ATTR_VALID)
            
    def convertOffsetToAmp(self, offset, channel):
        """
            Converts the offset in rawdata to amp.
            formula: RawData/10(Voltages(10|-10))*range
            @param offset: offset in rawdata
            @param channel: channel from 1 - 4
        """
        offsetAmp = ((offset/self.AduToVoltConstant)*10/10)*self.dictRanges[self.AllRanges[channel-1]]
        return offsetAmp
            
    def checkAlbaEmState(self):
        state = self.AlbaElectr.getState()
        
        if state == 'ON': self.set_state(PyTango.DevState.ON)
        elif state == 'RUNNING': self.set_state(PyTango.DevState.RUNNING)
        elif state == 'IDLE': self.set_state(PyTango.DevState.STANDBY)
        elif state == 'ALARM' : self.set_state(PyTango.DevState.ALARM)
        elif state == 'MOVING' : self.set_state(PyTango.DevState.MOVING)
        #elif state == 'FAULT' : self.set_state(PyTango.DevState.FAULT)
        else: 
            self.my_logger.error('Unknown state %s', state)
            
    def readMeasure(self,axis):
        attr = float(self.AlbaElectr.getMeasure(str(axis)))
        return attr
        
    def readBufferChannel(self,axis):
        attr = self.AlbaElectr.getAvData(axis)
        return attr
    
    def readBufferMean(self,axis):
        attr = self.AlbaElectr.getAvData(axis)
        length = len(attr)
        mean = sum(attr) / length
        return mean
    
    def getAllRanges(self):
        rgs = self.AlbaElectr.getRanges(['1','2','3','4'])
        for i,r in enumerate(rgs): 
            self.AllRanges[i] = r[1]
            
    def recoverRanges(self,ranges):
        ranges = [['1', ranges[0]], ['2', ranges[1]], ['3', ranges[2]], ['4', ranges[3]]]
        print "Ranges to write: %s" %ranges
        self.AlbaElectr.setRanges(ranges)

        
#==================================================================
#
#    PyAlbaEm command methods
#
#==================================================================

    def StopAdc(self):
        self.AlbaElectr.StopAdc()
     
    def Stop(self):
        self.AlbaElectr.Stop()       
    
    def StartAdc(self):
        self.AlbaElectr.StartAdc()
    
    def Start(self):
        self.AlbaElectr.Start()
        
    def enableChannel(self,axis):
        self.AlbaElectr.enableChannel(axis)
    
    def setAvsamples(self,value):
        self.AlbaElectr.setAvsamples(value)
        
    def setTrigperiode(self,value):
        self.AlbaElectr.setTrigperiod(value)
        
    def setPoints(self,value):
        self.AlbaElectr.setPoints(value)
        
    def getEmState(self):
        state = self.AlbaElectr.getState()
        return state
    
    def offsetCorrection(self,data):
        self.AlbaElectr.stateMoving = True
        percentage = float(data[0])
        value=percentage/100.0
        channels = eval(data[1])
        dev_proxy = PyTango.DeviceProxy(self.get_name())
        for i in channels:
            self._offsetPercentages[i-1]=percentage
            print '----------------------------------------------    offset_percentage_ch%d' %(i), percentage
            ch = 'offset_percentage_ch%d' %(i)
            dev_proxy.write_attribute(ch, percentage)
        ''' '''
        #thread.start_new_thread(self.changeOffsets,(channels,value))

    def changeOffsets(self, channels, value):
        self.set_status("The device is Correcting Offsets. ")
        #print "Init changeOffsets, Changing state to MOVING"
        chans = []
        for ra in channels: chans.append(str(ra))
        rgs = self.AlbaElectr.getRanges(chans)

        try:
            self.AlbaElectr.digitalOffsetCorrect(channels,'all',value,1)
        except Exception, e:
            #TODO: what to do when offset correction fails?!?!?
            self.error_stream('Exception while running offset correction.')
            self.error_stream(repr(e))
        finally:
            self.AlbaElectr.setRanges(rgs)
            rgs2 =  self.AlbaElectr.getRanges(chans)
            print "Before, after of ranges: "
            print repr(rgs), repr(rgs2)

        self.set_status(self.AlbaElectr.getStatus())
        self.AlbaElectr.stateMoving = False


        
    def digitalInversion(self,option):
        self.AlbaElectr.setDInvs(option)
        
    def sendCommand(self,command):
        answer = self.AlbaElectr.ask(command)
        return answer
    

#==================================================================
#
#    PyAlbaEmClass class definition
#
#==================================================================
class PyAlbaEmClass(fandango.DynamicDSClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'AlbaEmName':
            [PyTango.DevString,
            "name or ip of the Alba Electrometer",
            [] ],
        'DynamicAttributes':
            [PyTango.DevVarStringArray,
            "",
            [] 
            ],
        'LogFileName':
            [PyTango.DevString,
            "",
            [] 
            ],
        }

    #    Command definitions
    cmd_list = {
        'updateDynamicAttributes':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
                'Display level':PyTango.DispLevel.EXPERT,
             } ],
        'Stop':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'Start':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'StopAdc':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'StartAdc':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'enableChannel':
            [[PyTango.DevShort, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'setAvsamples':
            [[PyTango.DevDouble, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'setTrigperiode':
            [[PyTango.DevDouble, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'setPoints':
            [[PyTango.DevDouble, ""],
            [PyTango.DevVoid, ""],
            {
             } ],
        'getEmState':
            [[PyTango.DevVoid, ""],
            [PyTango.DevString, ""],
            {
             } ],
        'offsetCorrection':
            #[[PyTango.DevDouble, "% to correct"],
            [[PyTango.DevVarStringArray, "% to correct, channels to correct"],
            [PyTango.DevVoid, ""],
            {
             } ],
        'sendCommand':
            [[PyTango.DevString, ""],
            [PyTango.DevString, ""],
            {
             } ],
        }


    #    Attribute definitions
    attr_list = {
        'I1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'I2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'I3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'I4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
                 
        'InstantI1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'InstantI2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'InstantI3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'InstantI4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
                 
        'AllChannels':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 4]],
        'LastValues':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 4]],
        'AutoRange_ch1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRange_ch2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRange_ch3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRange_ch4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
                 
        'AutoRangeMin_ch1':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRangeMin_ch2':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRangeMin_ch3':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRangeMin_ch4':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
                 
        'AutoRangeMax_ch1':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRangeMax_ch2':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRangeMax_ch3':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AutoRangeMax_ch4':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        
        'range_ch1':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'range_ch2':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'range_ch3':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'range_ch4':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Ranges':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4],
            {
                'description':"You must introduce the four ranges to write.\nExample of writing value: 1mA 1mA 1uA 100uA"
            }
            ],
        'filter_ch1':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'filter_ch2':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'filter_ch3':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'filter_ch4':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Filters':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4],
            {
                'description':"You must introduce the four filters to write.\nExample of writing value: 1 10 100 NO "
            }
            ],
        'dInversion_ch1':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'dInversion_ch2':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'dInversion_ch3':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'dInversion_ch4':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'dInversions':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4],
            {
                'description':"You must introduce the four digital inversions \
                                in order to write. First one corresponds to \
                                first channel and so on.\n\
                                Example: NO,NO,YES,YES"
            }
            ],
        'offset_ch1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'offset_ch2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'offset_ch3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'offset_ch4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'offset_percentage_ch1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized' : 'true_without_hard_applied' #: "true"#_without_hard_applied",
            }
            ],
        'offset_percentage_ch2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized' : 'true_without_hard_applied'#'Memorized': "true"#_without_hard_applied",
            }
            ],
        'offset_percentage_ch3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized' : 'true_without_hard_applied'#'Memorized': "true"#_without_hard_applied",
            }
            ],
        'offset_percentage_ch4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized' : 'true_without_hard_applied'#'Memorized': "true"#_without_hard_applied",
            }
            ],
#        'offsets':
#            [[PyTango.DevDouble,
#            PyTango.SPECTRUM,
#            PyTango.READ_WRITE, 4]
#            ],
        'ChannelsNames':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4],
            {
                'description':"Channels names. Must be the same names that already exists for pool channels.",
                #'memorized': "True"
            }
            ],
#        'LogRecord':
#            [[PyTango.DevBoolean,
#            PyTango.SCALAR,
#            PyTango.READ_WRITE]],
        'TriggerMode':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Trigger mode for acquiring. Could be INT or EXT",
            }
            ],
        'TriggerPeriod':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Trigger period in seconds",
            }
            ],
        'TriggerDelay':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Trigger delay in seconds",
            }
            ],
        'BufferSize':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Number of points per acquisition",
            }
            ],
        'AvSamples':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Number of points per acquisition",
            }
            ],
        'BufferI1':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 4096],
            ],
        'BufferI2':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 4096],
            ],
        'BufferI3':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 4096],
            ],
        'BufferI4':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 4096],
            ],
        'BufferI1Mean':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            ],
        'BufferI2Mean':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            ],
        'BufferI3Mean':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            ],
        'BufferI4Mean':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            ],
        'Firmware_version':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'AlbaEmIP':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'AlbaEmMAC':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'SampleRate':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }


#------------------------------------------------------------------
#    PyAlbaEmClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In PyAlbaEmClass  constructor"

#==================================================================
#
#    PyAlbaEm class main method
#
#==================================================================
if __name__ == '__main__':
    #logging example taurus/core/util/log.py (format)
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(PyAlbaEmClass,PyAlbaEm,'PyAlbaEm')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
